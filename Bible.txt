# ðŸ“– SNES Classic Frontloader Bible

---

## Entrypoint: `frontloader_modular.c`

* **Purpose:** Main entry point of the program.
* **Responsibilities:**

  * Initializes SDL2 video and events.
  * Plays a built-in **splash video** (default shipped, user-changeable).

    * Splash serves as a debug indicator that SDL + Renderer are working.
    * While splash runs â†’ theme loader checks configs and validates theme.
  * Creates the main application window (`SDL_Window`).
  * Creates the main renderer (`SDL_Renderer`).
  * Loads the selected theme via **Theme Loader**.
  * Initializes all layers (bg1, bg2, fg1, fg2, sprites, HUD).
  * Enters the **main event loop**:

    * Handles SDL events (quit, keyboard, controller).
    * Renders layers in SNES order.
    * Updates display with `SDL_RenderPresent`.
  * On exit:

    * Cleans up SDL resources.
    * Frees theme + layers.

---

## Theme System

* Themes live in `/themes/<name>/`.
* **Config.ini** defines:

  * Tileset definitions per layer.
  * Which Lua script to use.
  * Theme metadata (name, author, etc.).
* **Assets:** PNG-based tilesets.

  * Layers: bg1, bg2, fg1, fg2, spr, hud1 (req), hud2 (opt).
  * Transparent PNG supported.
* **Fallbacks:**

  * If a required layer asset is missing, theme loader â†’ **fatal error**.
  * If optional asset missing, transparent placeholder texture is generated.
  * If theme completely fails â†’ fallback theme loaded.

---

## Layers

* SNES tile-based design.
* Render target: **800x600** window.

  * Internal grid: **800x608** (50Ã—38 tiles, 16px each).
  * Extra 8px at top is cut off (keeps SNES multiple-of-16 authenticity).

### Tile Rules

* Tiles must be **multiples of 16**.
* **BG/FG layers:** 16Ã—16 minimum â†’ 160Ã—320 maximum (200 tiles).
* **HUD tiles:** 16Ã—160 â†’ 64Ã—160, multiples of 16.
* **Sprites:** 320Ã—320.

### FPS Rules

* **HUD animations:** max 2 FPS.
* **Sprites:** 4, 8, or 12 FPS.
* **BG/FG layers:** 1, 2, or 4 FPS.

### Rendering Pipeline

1. Lua provides **tilemap arrangement** (ex: `C4 â†’ G9`).
2. Lua defines animation frames per tile.

   * Example: `F5,G5` = frame1, `F6,G6` = frame2 @ 4FPS.
3. Frontloader composites layers â†’ renderer.

---

## Error Handling

* If splash shows â†’ renderer confirmed working.
* If **theme fails to load fully** â†’ renderer displays an error log (why it failed).
* If only a single layer fails (ex: missing FG2):

  * Replace with transparent placeholder.
  * Continue execution without crash.

---

## Lua Integration

* Lua drives **tile arrangement + animations**.
* Lua can:

  * Place tiles onto the grid.
  * Define animations (tile sequences + FPS).
  * Define interactive menus (grid-based, tile-based, etc.).
* Lua **cannot**:

  * Execute system commands.
  * Override hardcoded Frontloader limitations.

---

## Menu System (Required)

The Frontloader requires all themes to expose the following menu items (graphical or textual). If missing â†’ **theme loader fails** and fallback is loaded.

### File Menu (Required)

* **Load ROM**

  * Opens configured ROM directory.
  * User selects file.
  * Passes ROM path â†’ Frontloader loads via **SNES9x libretro core**.
* **Recent ROMs**

  * Displays last N games.
  * Selecting one â†’ reloads ROM directly.
* **Exit**

  * Clean shutdown.

### File Menu (Optional Extensions)

* Save State
* Load State
* Reset Game
* Controller Config
* Video Options
* Audio Options

---

## Execution Flow

1. Start program â†’ play splash.
2. Splash runs while configs + theme checked.
3. Theme initialized:

   * Load config.ini.
   * Load assets (tilesets).
   * Run Lua tilemap script.
   * Initialize required menu items.
4. Enter main loop:

   * Render SNES-style layered scene.
   * Lua controls layout + interactions.
   * Frontloader enforces hardcoded rules.
5. User selects ROM:

   * Theme â†’ `frontloader_menu_request("load_rom")`.
   * Frontloader validates + calls SNES9x core.
   * Emulator runs inside renderer context.
6. On exit â†’ clean shutdown.

---
